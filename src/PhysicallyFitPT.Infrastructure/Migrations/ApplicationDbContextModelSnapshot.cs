// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhysicallyFitPT.Infrastructure.Data;

#nullable disable

namespace PhysicallyFitPT.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("PhysicallyFitPT.Core.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClinicianName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClinicianNpi")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCheckedIn")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("QuestionnaireCompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("QuestionnaireSentAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ScheduledEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ScheduledStart")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("VisitType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PatientId", "ScheduledStart");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("PhysicallyFitPT.Core.CheckInMessageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("AttemptedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("FailureReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LinkTokenHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Method")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("QuestionnaireCompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionnaireType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ScheduledSendAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("VisitType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CheckInMessageLogs");
                });

            modelBuilder.Entity("PhysicallyFitPT.Core.CptCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CptCodes");
                });

            modelBuilder.Entity("PhysicallyFitPT.Core.Icd10Code", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Icd10Codes");
                });

            modelBuilder.Entity("PhysicallyFitPT.Core.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("SignedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("VisitType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("PhysicallyFitPT.Core.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssistiveDevicesCsv")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComorbiditiesCsv")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("LivingSituation")
                        .HasColumnType("TEXT");

                    b.Property<string>("MRN")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicationsCsv")
                        .HasColumnType("TEXT");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LastName", "FirstName");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PhysicallyFitPT.Core.QuestionnaireDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BodyRegion")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JsonSchema")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("QuestionnaireDefinitions");
                });

            modelBuilder.Entity("PhysicallyFitPT.Core.QuestionnaireResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswersJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuestionnaireDefinitionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("QuestionnaireResponses");
                });

            modelBuilder.Entity("PhysicallyFitPT.Core.Appointment", b =>
                {
                    b.HasOne("PhysicallyFitPT.Core.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PhysicallyFitPT.Core.Note", b =>
                {
                    b.HasOne("PhysicallyFitPT.Core.Appointment", "Appointment")
                        .WithOne("Note")
                        .HasForeignKey("PhysicallyFitPT.Core.Note", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhysicallyFitPT.Core.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PhysicallyFitPT.Core.AssessmentSection", "Assessment", b1 =>
                        {
                            b1.Property<Guid>("NoteId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ClinicalImpression")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RehabPotential")
                                .HasColumnType("TEXT");

                            b1.HasKey("NoteId");

                            b1.ToTable("Notes");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");

                            b1.OwnsMany("PhysicallyFitPT.Core.Goal", "Goals", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("BaselineValue")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("TEXT");

                                    b2.Property<bool>("IsLongTerm")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("MeasureType")
                                        .HasColumnType("TEXT");

                                    b2.Property<Guid>("NoteId")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("Status")
                                        .HasColumnType("INTEGER");

                                    b2.Property<DateTime?>("TargetDate")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("TargetValue")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NoteId");

                                    b2.ToTable("NoteAssessmentGoals", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("NoteId");
                                });

                            b1.OwnsMany("PhysicallyFitPT.Core.Icd10Link", "Icd10Codes", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Description")
                                        .HasColumnType("TEXT");

                                    b2.Property<Guid>("NoteId")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NoteId");

                                    b2.ToTable("NoteAssessmentIcd10", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("NoteId");
                                });

                            b1.Navigation("Goals");

                            b1.Navigation("Icd10Codes");
                        });

                    b.OwnsOne("PhysicallyFitPT.Core.ObjectiveSection", "Objective", b1 =>
                        {
                            b1.Property<Guid>("NoteId")
                                .HasColumnType("TEXT");

                            b1.HasKey("NoteId");

                            b1.ToTable("Notes");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");

                            b1.OwnsMany("PhysicallyFitPT.Core.MmtMeasure", "Mmt", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Grade")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("MuscleGroup")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<Guid>("NoteId")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Notes")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("Side")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("WithPain")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NoteId");

                                    b2.ToTable("NoteObjectiveMmt", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("NoteId");
                                });

                            b1.OwnsMany("PhysicallyFitPT.Core.OutcomeMeasureScore", "OutcomeMeasures", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("TEXT");

                                    b2.Property<DateTime?>("CollectedOn")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Instrument")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<Guid>("NoteId")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("Percent")
                                        .HasColumnType("REAL");

                                    b2.Property<int?>("RawScore")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NoteId");

                                    b2.ToTable("NoteObjectiveOutcomeMeasures", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("NoteId");
                                });

                            b1.OwnsMany("PhysicallyFitPT.Core.ProvidedIntervention", "ProvidedInterventions", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("CptCode")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Description")
                                        .HasColumnType("TEXT");

                                    b2.Property<int?>("Minutes")
                                        .HasColumnType("INTEGER");

                                    b2.Property<Guid>("NoteId")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("Units")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NoteId");

                                    b2.ToTable("NoteProvidedInterventions", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("NoteId");
                                });

                            b1.OwnsMany("PhysicallyFitPT.Core.RomMeasure", "Rom", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Joint")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<int?>("MeasuredDegrees")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Movement")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<int?>("NormalDegrees")
                                        .HasColumnType("INTEGER");

                                    b2.Property<Guid>("NoteId")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Notes")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("Side")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("WithPain")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NoteId");

                                    b2.ToTable("NoteObjectiveRom", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("NoteId");
                                });

                            b1.OwnsMany("PhysicallyFitPT.Core.SpecialTest", "SpecialTests", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<Guid>("NoteId")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Notes")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("Result")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("Side")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NoteId");

                                    b2.ToTable("NoteObjectiveSpecialTests", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("NoteId");
                                });

                            b1.Navigation("Mmt");

                            b1.Navigation("OutcomeMeasures");

                            b1.Navigation("ProvidedInterventions");

                            b1.Navigation("Rom");

                            b1.Navigation("SpecialTests");
                        });

                    b.OwnsOne("PhysicallyFitPT.Core.PlanSection", "Plan", b1 =>
                        {
                            b1.Property<Guid>("NoteId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Duration")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Frequency")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NextVisitFocus")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PlannedInterventionsCsv")
                                .HasColumnType("TEXT");

                            b1.HasKey("NoteId");

                            b1.ToTable("Notes");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");

                            b1.OwnsMany("PhysicallyFitPT.Core.ExercisePrescription", "Hep", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Dosage")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<Guid>("NoteId")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Notes")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NoteId");

                                    b2.ToTable("NotePlanHep", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("NoteId");
                                });

                            b1.Navigation("Hep");
                        });

                    b.OwnsOne("PhysicallyFitPT.Core.SubjectiveSection", "Subjective", b1 =>
                        {
                            b1.Property<Guid>("NoteId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AggravatingFactors")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ChiefComplaint")
                                .HasColumnType("TEXT");

                            b1.Property<string>("EasingFactors")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FunctionalLimitations")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HistoryOfPresentIllness")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PainLocationsCsv")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PainSeverity0to10")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PatientGoalsNarrative")
                                .HasColumnType("TEXT");

                            b1.HasKey("NoteId");

                            b1.ToTable("Notes");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");
                        });

                    b.Navigation("Appointment");

                    b.Navigation("Assessment")
                        .IsRequired();

                    b.Navigation("Objective")
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Plan")
                        .IsRequired();

                    b.Navigation("Subjective")
                        .IsRequired();
                });

            modelBuilder.Entity("PhysicallyFitPT.Core.Appointment", b =>
                {
                    b.Navigation("Note");
                });

            modelBuilder.Entity("PhysicallyFitPT.Core.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
