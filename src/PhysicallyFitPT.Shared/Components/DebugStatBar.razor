@inject IDataService Data
@implements IDisposable

<div class="debug-bar" style="background-color: #f0f0f0; border: 1px solid #ccc; padding: 8px; margin-bottom: 16px; font-size: 12px; font-family: monospace;">
  Patients: @(stats?.Patients ?? 0) |
  Last Updated: @(stats?.LastPatientUpdated?.ToLocalTime().ToString("g") ?? "Never") |
  Appointments: @(stats?.Appointments ?? 0) |
  API: @(stats?.ApiHealthy == true ? "✓ Healthy" : "✗ Unhealthy")
</div>

@code {
  private AppStatsDto? stats;
  private Timer? updateTimer;
  private bool disposed;

  protected override async Task OnInitializedAsync()
  {
    await LoadStatsAsync();
    
    // Start polling every 10 seconds
    updateTimer = new Timer(async _ =>
    {
      await LoadStatsAsync();
      await InvokeAsync(StateHasChanged);
    }, null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
  }

  private async Task LoadStatsAsync()
  {
    try
    {
      stats = await Data.GetStatsAsync();
    }
    catch
    {
      // If we fail to get stats, mark API as unhealthy
      if (stats != null)
      {
        stats.ApiHealthy = false;
      }
      else
      {
        stats = new AppStatsDto { ApiHealthy = false };
      }
    }
  }

  public void Dispose()
  {
    if (!disposed)
    {
      updateTimer?.Dispose();
      disposed = true;
    }
  }
}
