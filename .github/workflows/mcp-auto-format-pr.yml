name: Auto-format PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

jobs:
  autoformat-ubuntu:
    name: Auto-format Code (Ubuntu-compatible)
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      format-needed: ${{ steps.format-check.outputs.FORMAT_NEEDED }}
      ubuntu-changes: ${{ steps.format-check.outputs.UBUNTU_CHANGES }}
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      
      - name: Setup .NET SDK 8.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Restore Ubuntu-compatible project
        run: |
          dotnet restore src/PhysicallyFitPT.Core/PhysicallyFitPT.Core.csproj --use-lock-file
      
      - name: Check for formatting issues (Ubuntu-compatible project)
        id: format-check
        run: |
          echo "Checking format for Ubuntu-compatible project..."
          
          # Format Ubuntu-compatible project only
          dotnet format ./src/PhysicallyFitPT.Core/PhysicallyFitPT.Core.csproj --verify-no-changes --verbosity diagnostic > format-result.txt 2>&1 || echo "FORMAT_NEEDED=true" >> $GITHUB_OUTPUT
          
          if [ -f format-result.txt ]; then
            echo "FORMAT_OUTPUT<<EOF" >> $GITHUB_OUTPUT
            cat format-result.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Apply formatting fixes (Ubuntu-compatible project)
        if: steps.format-check.outputs.FORMAT_NEEDED == 'true'
        run: |
          echo "üîß Applying code formatting fixes to Ubuntu-compatible project..."
          dotnet format ./src/PhysicallyFitPT.Core/PhysicallyFitPT.Core.csproj --verbosity diagnostic
          
          # Check if any files were modified
          if git diff --quiet; then
            echo "No formatting changes needed"
            echo "UBUNTU_CHANGES=false" >> $GITHUB_OUTPUT
          else
            echo "Formatting changes applied to Ubuntu-compatible project"
            echo "UBUNTU_CHANGES=true" >> $GITHUB_OUTPUT
            git add -A
            git config --local user.email "action@github.com"
            git config --local user.name "Auto-format Bot"
            git commit -m "Auto-format: Apply StyleCop formatting rules (Ubuntu-compatible projects)
            
            - Applied dotnet format to PhysicallyFitPT.Core project  
            - Fixed indentation, spacing, and style issues
            - Automated by GitHub Actions on PR #${{ github.event.pull_request.number }}"
          fi

  autoformat-macos:
    name: Auto-format Code (MAUI projects)
    runs-on: macos-latest
    needs: autoformat-ubuntu
    if: github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      macos-changes: ${{ steps.format-check.outputs.MACOS_CHANGES }}
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      
      - name: Setup .NET SDK 8.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
            
      - name: Cache MAUI workloads
        uses: actions/cache@v4
        with:
          path: ~/.dotnet/toolResolverCache
          key: ${{ runner.os }}-dotnet-workloads-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-workloads-

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: microsoft
          java-version: "17"

      - name: Install MAUI workloads
        run: |
          set -e
          echo "Installing MAUI workloads..."
          
          # Update workload manifests first
          dotnet workload update --skip-sign-check || echo "Workload update failed, continuing..."
          
          # Install MAUI workload
          if ! dotnet workload install maui --skip-sign-check; then
            echo "MAUI workload installation failed, trying individual components..."
            dotnet workload install android --skip-sign-check || echo "Android workload failed"
            dotnet workload install ios --skip-sign-check || echo "iOS workload failed" 
            dotnet workload install maccatalyst --skip-sign-check || echo "macCatalyst workload failed"
          fi
          
          echo "Installed workloads:"
          dotnet workload list
          
      - name: Restore workloads for solution
        run: dotnet workload restore
      
      - name: Restore solution
        run: dotnet restore PFPT.sln --locked-mode
      
      - name: Check for formatting issues (MAUI projects)
        id: format-check
        run: |
          set -e
          echo "Checking format for projects with mobile dependencies..."
          
          HAS_CHANGES=false
          
          # Format each project with mobile dependencies individually
          projects=(
            "./src/PhysicallyFitPT.Web/PhysicallyFitPT.Web.csproj"
            "./tests/PhysicallyFitPT.Core.Tests/PhysicallyFitPT.Core.Tests.csproj"
            "./src/PhysicallyFitPT.Seeder/PhysicallyFitPT.Seeder.csproj"
            "./src/PhysicallyFitPT.Maui/PhysicallyFitPT.Maui.csproj"
            "./src/PhysicallyFitPT.Shared/PhysicallyFitPT.Shared.csproj"
            "./src/PhysicallyFitPT.Infrastructure/PhysicallyFitPT.Infrastructure.csproj"
          )
          
          for project in "${projects[@]}"; do
            if [ -f "$project" ]; then
              echo "Formatting $project..."
              if ! dotnet format "$project" --verify-no-changes --verbosity diagnostic; then
                echo "Formatting needed for $project"
                dotnet format "$project" --verbosity diagnostic
                HAS_CHANGES=true
              fi
            fi
          done
          
          if [ "$HAS_CHANGES" = true ]; then
            echo "MACOS_CHANGES=true" >> $GITHUB_OUTPUT
          else
            echo "MACOS_CHANGES=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit formatting changes (MAUI projects)
        if: steps.format-check.outputs.MACOS_CHANGES == 'true'
        run: |
          git add -A
          git config --local user.email "action@github.com"
          git config --local user.name "Auto-format Bot"
          git commit -m "Auto-format: Apply StyleCop formatting rules (MAUI projects)
          
          - Applied dotnet format to projects with mobile dependencies
          - Fixed indentation, spacing, and style issues
          - Automated by GitHub Actions on PR #${{ github.event.pull_request.number }}"

  push-changes:
    name: Push formatting changes
    runs-on: ubuntu-latest
    needs: [autoformat-ubuntu, autoformat-macos]
    if: needs.autoformat-ubuntu.outputs.ubuntu-changes == 'true' || needs.autoformat-macos.outputs.macos-changes == 'true'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          
      - name: Push all formatting changes
        run: |
          echo "Pushing formatting changes..."
          git push
      
      - name: Comment on PR with formatting results
        if: needs.autoformat-ubuntu.outputs.format-needed == 'true' || needs.autoformat-macos.outputs.macos-changes == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ubuntuChanges = '${{ needs.autoformat-ubuntu.outputs.ubuntu-changes }}' === 'true';
            const macosChanges = '${{ needs.autoformat-macos.outputs.macos-changes }}' === 'true';
            const formatNeeded = '${{ needs.autoformat-ubuntu.outputs.format-needed }}' === 'true';
            
            let comment = '';
            
            if (ubuntuChanges || macosChanges) {
              comment = `üîß **Auto-formatting applied!**
              
              I've automatically applied code formatting fixes to this PR to ensure consistency with PFPT coding standards.
              
              **Changes applied:**
              - StyleCop formatting rules
              - Consistent indentation and spacing  
              - Code style standardization
              
              **Projects formatted:**`;
              
              if (ubuntuChanges) {
                comment += '\n- ‚úÖ Ubuntu-compatible projects (PhysicallyFitPT.Core)';
              }
              if (macosChanges) {
                comment += '\n- ‚úÖ MAUI projects with mobile dependencies (Web, Infrastructure, Shared, Maui, Tests, Seeder)';
              }
              
              comment += '\n\nThe PR is now ready for review with properly formatted code.';
            } else if (formatNeeded) {
              comment = `‚ö†Ô∏è **Formatting issues detected**
              
              Code formatting issues were found but could not be automatically fixed.
              
              Please run \`dotnet format PFPT.sln\` locally and commit the changes, or check the CI logs for details.`;
            }
            
            if (comment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }